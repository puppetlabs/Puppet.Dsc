name: "puppetize"

on:
  schedule:
    - cron: "0 6 1,15 * *" 
  workflow_dispatch:
    inputs:
      module_name:
        description: |
          The name of the PowerShell module as it appears on the PowerShell Gallery.
        required: false

env:
  pdk_version: 2.7.1.0
  module_cache: Puppet.Dsc, PSFramework, PSDscResources, powershell-yaml

jobs:
  setup:
    name: "setup"
    runs-on: "windows-latest"
    outputs:
      module: ${{ steps.setup_matrix.outputs.module }}

    steps:

      - name: "checkout"
        uses: "actions/checkout@v3"

      - name: "install modules"
        uses: potatoqualitee/psmodulecache@v5.1
        with:
          shell: powershell
          modules-to-cache: ${{ env.module_cache }}

      - name: "setup matrix"
        id: "setup_matrix"
        shell: powershell
        run: |
          Import-Module -Name PSDesiredStateConfiguration -Force
          Import-Module -Name ./src/BuildMatrix/BuildMatrix.psd1 -Force
          # Get the top 50 downloaded DSC modules from the forge
          $response = Invoke-WebRequest -URI https://forgeapi.puppet.com/v3/modules?owner=dsc`&limit=50`&endorsements=approved`&sort_by=downloads -Method Get -UseBasicParsing
          $parsed = $response.Content | ConvertFrom-Json
          $fileName = "./dsc_resources.yml"

          # Add the module to the dsc_resource.yml if it doesn't exist
          ForEach ($Module in $parsed.results.name) {
            $module_name_exists =  Select-String -Quiet -Pattern $Module -Path $fileName
            if (-not $module_name_exists)
            {
              Add-Content -Path $fileName -Value "  - name: $Module"
            }
          }

          $ModuleData = $ENV:MODULE_NAME
          if (!$ModuleData) {
            $ModuleData = Get-ModuleData -Path $fileName -UnPuppetizedOnly
          }

          $ModuleData | ConvertTo-BuildMatrix | Set-BuildMatrix
        env:
          MODULE_NAME: ${{ github.event.inputs.module_name }}

  puppetize:
    runs-on: "windows-latest"
    defaults:
      run:
        shell: powershell
    needs: "setup"
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.setup.outputs.module) }}

    steps:

      - name: "checkout"
        uses: "actions/checkout@v3"

      - name: "install required modules"
        uses: potatoqualitee/psmodulecache@v5.1
        with:
          shell: powershell
          modules-to-cache: ${{ env.module_cache }}

      - name: "install pdk"
        run: |
          choco feature disable -n=showDownloadProgress
          choco install pdk --version ${{ env.pdk_version }} -y

      - name: "configure winrm"
        run: |
          Write-Host 'Ensuring WinRM is configured for DSC'
          Get-ChildItem WSMan:\localhost\Listener\ -OutVariable Listeners | Format-List * -Force
          $HTTPListener = $Listeners | Where-Object -FilterScript { $_.Keys.Contains('Transport=HTTP') }
          If ($HTTPListener.Count -eq 0) {
            winrm create winrm/config/Listener?Address=*+Transport=HTTP
            winrm e winrm/config/listener
          }

      - name: "publish module"
        env:
          FORGE_TOKEN: ${{ secrets.FORGE_API_TOKEN }}
        run: |
          Import-Module -Name PSDesiredStateConfiguration -Force
          Import-Module -Name Puppet.Dsc -Force
          $null = Get-Command PDK, Publish-NewDscModuleVersion

          $PublishParameters = @{
            ForgeNameSpace = 'dsc'
            Name = '${{ matrix.module_name }}'
            OnlyNewer = $true
            MaxBuildCount = 1
          }
          Publish-NewDscModuleVersion @PublishParameters -Verbose
